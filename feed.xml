<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KANG ARCHIVE</title>
  
  
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://rhkang.github.io/"/>
  <updated>2019-05-15T02:14:22.145Z</updated>
  <id>https://rhkang.github.io/</id>
  
  <author>
    <name>R.H.Kang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ Data 다루기</title>
    <link href="https://rhkang.github.io/2019/05/15/programming-with-cpp/"/>
    <id>https://rhkang.github.io/2019/05/15/programming-with-cpp/</id>
    <published>2019-05-15T02:06:17.000Z</published>
    <updated>2019-05-15T02:14:22.145Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Struct"><a href="#Struct" class="headerlink" title="Struct"></a>Struct</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">obj</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> mem1;</span><br><span class="line">  <span class="keyword">char</span>[<span class="number">3</span>] mem2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">obj1</span> = &#123;</span><span class="number">2</span>, &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'+'</span>&#125;&#125;;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(obj1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Struct&quot;&gt;&lt;a href=&quot;#Struct&quot; class=&quot;headerlink&quot; title=&quot;Struct&quot;&gt;&lt;/a&gt;Struct&lt;/h4&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="C++" scheme="https://rhkang.github.io/categories/IT/C/"/>
    
    
      <category term="C++" scheme="https://rhkang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>IA32 Programming</title>
    <link href="https://rhkang.github.io/2019/04/11/IA32-programming/"/>
    <id>https://rhkang.github.io/2019/04/11/IA32-programming/</id>
    <published>2019-04-11T06:09:00.000Z</published>
    <updated>2019-04-11T10:25:24.902Z</updated>
    
    <content type="html"><![CDATA[<p>Compiler Explorer - <a href="https://godbolt.org/" target="_blank" rel="noopener">https://godbolt.org/</a> (C코드를 Assembly로 변환)</p><h4 id="Indexed-Addressing-Modes"><a href="#Indexed-Addressing-Modes" class="headerlink" title="Indexed Addressing Modes"></a>Indexed Addressing Modes</h4><p>$D(R_b, R_i, S) = \textrm{Mem}[\textrm{Reg}[R_b] + S* \textrm{Reg}[R_i] + D]$</p><p>$D$:  Constant “displacement” 1, 2, or 4 bytes<br>$R_b$:  Base Register<br>$R_i$:  Index Register - except for %esp<br>$S$:  Scale - 1, 2, 4, or 8<br><br></p><h4 id="Operations"><a href="#Operations" class="headerlink" title="Operations"></a>Operations</h4><ol><li><strong>movl Source, Dest</strong><br>Move 4-byte (“long”) word</li></ol><table><thead><tr><th>Source</th><th>Destination</th><th>Assembly</th><th>C analog</th></tr></thead><tbody><tr><td><strong>Imm</strong></td><td><strong>Reg</strong></td><td>movl $0x4, %eax</td><td>temp = 0x4;</td></tr><tr><td><strong>Imm</strong></td><td><strong>Mem</strong></td><td>movl $-147, (%eax)</td><td>*p = -147;</td></tr><tr><td><strong>Reg</strong></td><td><strong>Reg</strong></td><td>movl %eax, %edx</td><td>temp2 = temp1;</td></tr><tr><td><strong>Reg</strong></td><td><strong>Mem</strong></td><td>movl %eax, (%edx)</td><td>*p = temp;</td></tr><tr><td><strong>Mem</strong></td><td><strong>Reg</strong></td><td>movl (%eax), %edx</td><td>temp = *p;</td></tr></tbody></table><ol start="2"><li><strong>Arithmetic Operations</strong></li></ol><table><thead><tr><th>Format</th><th>Computation</th></tr></thead><tbody><tr><td>addl Src, Dest</td><td>Dest = Dest + Src</td></tr><tr><td>subl Src, Dest</td><td>Dest = Dest - Src</td></tr><tr><td>imull Src, Dest</td><td>Dest = Dest * Src</td></tr><tr><td>sall Src, Dest</td><td>Dest = Dest &lt;&lt; Src (Also called shll)</td></tr><tr><td>sarl Src, Dest</td><td>Dest = Dest &gt;&gt; Src (Arithmetic)</td></tr><tr><td>shrl Src, Dest</td><td>Dest = Dest &gt;&gt; Src (Logical)</td></tr><tr><td>xorl Src, Dest</td><td>Dest = Dest ^ Src</td></tr><tr><td>andl Src, Dest</td><td>Dest = Dest &amp; Src</td></tr><tr><td>orl Src, Dest</td><td>Dest = Dest $\vert$ Src</td></tr><tr><td>incl Dest</td><td>Dest = Dest + 1</td></tr><tr><td>decl Dest</td><td>Dest = Dest - 1</td></tr><tr><td>negl Dest</td><td>Dest = -Dest</td></tr><tr><td>notl Dest</td><td>Dest = ~Dest</td></tr></tbody></table><ol start="3"><li><strong><em>pushl Src</em></strong></li></ol><ul><li>Fetch operand at Src</li><li>Decrement %esp by 4</li><li>Write operand at address given by %esp</li></ul><ol start="4"><li><strong><em>popl Dest</em></strong></li></ol><ul><li>Read operand at address given by %esp</li><li>increment %esp by 4</li><li>Write to Dest</li></ul><ol start="5"><li><strong><em>call label</em></strong></li></ol><ul><li>Push return address on Stack (return address = current %eip)</li><li>Jump to label (Change %eip to label; %eip is program counter)</li></ul><ol start="6"><li><strong><em>ret</em></strong></li></ol><ul><li>Pop address from stack (Dest = %eip)</li><li>Jump to address</li></ul><p><br></p><h4 id="Stack-Frame"><a href="#Stack-Frame" class="headerlink" title="Stack Frame"></a>Stack Frame</h4><p>Current Stack Frame</p><ul><li>Parameters for function about to call</li><li>Local variables</li><li>Saved register context</li><li>Old frame Pointer</li></ul><p>Caller Stack Frame</p><ul><li>Retrun Address (pushed by <em>call</em> instruction)</li><li>Arguments for this call</li></ul><p><br></p><h4 id="Code-Examples"><a href="#Code-Examples" class="headerlink" title="Code Examples"></a>Code Examples</h4><p><strong>class06_cs230s19 - #5</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t = x + y;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">_sum:</span><br><span class="line">  pushl %ebp</span><br><span class="line">  movl %esp, %ebp</span><br><span class="line">  movl 12%(ebp), %eax</span><br><span class="line">  addl 8(%ebp), %eax</span><br><span class="line">  movl %ebp, %esp</span><br><span class="line">  popl %ebp</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure><p><strong>class06_cs230s19 - #15</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *xp, <span class="keyword">int</span> *yp)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t0 = *xp;</span><br><span class="line">  <span class="keyword">int</span> t1 = *yp;</span><br><span class="line">  *xp = t1;</span><br><span class="line">  *yp = t0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">swap:</span><br><span class="line">  pushl %ebp</span><br><span class="line">  movl %esp, %ebp</span><br><span class="line">  pushl %ebx</span><br><span class="line"></span><br><span class="line">  movl 12%(ebp), %ecx</span><br><span class="line">  movl 8(%ebp), %edx</span><br><span class="line">  movl (%ecx), %eax</span><br><span class="line">  movl (%edx), %ebx</span><br><span class="line">  movl %eax, (%edx)</span><br><span class="line">  movl %ebx, (%ecx)</span><br><span class="line"></span><br><span class="line">  movl -4(%ebp), %ebx</span><br><span class="line">  movl %ebp, %esp</span><br><span class="line">  popl %ebp</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Compiler Explorer - &lt;a href=&quot;https://godbolt.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://godbolt.org/&lt;/a&gt; (C코드를 Assembly로 변환)&lt;/p&gt;
&lt;h4 id
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="System" scheme="https://rhkang.github.io/categories/IT/System/"/>
    
    
      <category term="SP" scheme="https://rhkang.github.io/tags/SP/"/>
    
  </entry>
  
  <entry>
    <title>General-Purpose Registers (범용 레지스터)</title>
    <link href="https://rhkang.github.io/2019/04/08/general-purpose-registers/"/>
    <id>https://rhkang.github.io/2019/04/08/general-purpose-registers/</id>
    <published>2019-04-08T11:48:46.000Z</published>
    <updated>2019-04-11T07:36:37.648Z</updated>
    
    <content type="html"><![CDATA[<p>레지스터(Register)란? - <a href="https://en.wikipedia.org/wiki/Processor_register" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Processor_register</a><br>x86 레지스터 - <a href="https://en.wikipedia.org/wiki/X86#x86_registers" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/X86#x86_registers</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/1/15/Table_of_x86_Registers_svg.svg" alt="x86 Registers - Wikipedia"></p><hr><ul><li><strong>EAX (Extended Accumulator Register)</strong><br><br></li><li><strong>EBX (Extended Base Register)</strong><br><br></li><li><strong>ECX (Extended Counter Register)</strong><br><br></li><li><strong>EDX (Extended Data Register)</strong><br><br></li><li><strong>ESI (Extended Source Index)</strong><br><br></li><li><strong>EDI (Extended Destination Index)</strong><br><br></li><li><strong>ESP (Extended Stack Pointer)</strong><br><br></li><li><strong>EBP (Extended Base Pointer)</strong></li></ul><hr><p><strong>Caller (콜러) :</strong> Caller saves temporary in its frame before calling<br><strong>Callee (콜리) :</strong> Callee saves temporary in its frame before using</p><p>범용 레지스터들은 Caller-save 혹은 Callee-save 여부를 통해 구분이 가능하다.</p><p>EAX, EDX, ECX는 Caller-save,<br>EBX, ESI, EDI는 Callee-save로서 관리된다.<br>ESP, EBP는 각각 Stack Pointer, Frame Pointer로서의 특별한 역할을 지닌다.<br>EAX는 함수의 Return 값을 저장하기도 한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;레지스터(Register)란? - &lt;a href=&quot;https://en.wikipedia.org/wiki/Processor_register&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://en.wikipedia.org/wik
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="System" scheme="https://rhkang.github.io/categories/IT/System/"/>
    
    
      <category term="SP" scheme="https://rhkang.github.io/tags/SP/"/>
    
  </entry>
  
  <entry>
    <title>Java 이모저모</title>
    <link href="https://rhkang.github.io/2019/03/04/about-java/"/>
    <id>https://rhkang.github.io/2019/03/04/about-java/</id>
    <published>2019-03-04T06:23:52.000Z</published>
    <updated>2019-03-04T07:07:28.659Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"cat"</span>);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"cat"</span>);</span><br><span class="line"><span class="comment">// those are different</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">"cat"</span>;</span><br><span class="line">String s4 = <span class="string">"cat"</span>;</span><br><span class="line"><span class="comment">// they refer the same object</span></span><br></pre></td></tr></table></figure><h4 id="Compare-Two-Strings"><a href="#Compare-Two-Strings" class="headerlink" title="Compare Two Strings"></a>Compare Two Strings</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s == t; <span class="comment">//it compares addresses of them</span></span><br><span class="line">s.equals(t); <span class="comment">//it compares character sequences</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="Java" scheme="https://rhkang.github.io/categories/IT/Java/"/>
    
    
      <category term="java" scheme="https://rhkang.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>C언어 이모저모</title>
    <link href="https://rhkang.github.io/2019/03/03/about-c/"/>
    <id>https://rhkang.github.io/2019/03/03/about-c/</id>
    <published>2019-03-03T10:15:10.000Z</published>
    <updated>2019-03-04T07:07:23.503Z</updated>
    
    <content type="html"><![CDATA[<h4 id="How-do-you-allow-spaces-to-be-entered-using-scanf"><a href="#How-do-you-allow-spaces-to-be-entered-using-scanf" class="headerlink" title="How do you allow spaces to be entered using scanf?"></a>How do you allow spaces to be entered using scanf?</h4><p><a href="https://stackoverflow.com/questions/1247989/how-do-you-allow-spaces-to-be-entered-using-scanf" target="_blank" rel="noopener">https://stackoverflow.com/questions/1247989/how-do-you-allow-spaces-to-be-entered-using-scanf</a></p><h4 id="What-int-argC-char-argV-mean"><a href="#What-int-argC-char-argV-mean" class="headerlink" title="What int argC, char *argV[] mean?"></a>What int argC, char *argV[] mean?</h4><p><a href="https://stackoverflow.com/questions/3024197/what-does-int-argc-char-argv-mean" target="_blank" rel="noopener">https://stackoverflow.com/questions/3024197/what-does-int-argc-char-argv-mean</a></p><h4 id="Ternary-Operator"><a href="#Ternary-Operator" class="headerlink" title="Ternary Operator"></a>Ternary Operator</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x&gt;<span class="number">0</span>)</span><br><span class="line">  y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  y = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//is equivalent to</span></span><br><span class="line"></span><br><span class="line">y = (x&gt;<span class="number">0</span>) ? <span class="number">1</span>: <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><h4 id="올림-내림-반올림"><a href="#올림-내림-반올림" class="headerlink" title="올림, 내림, 반올림"></a>올림, 내림, 반올림</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="built_in">ceil</span>(<span class="number">4.2</span>) <span class="comment">//result = 5.0</span></span><br><span class="line">result = <span class="built_in">floor</span>(<span class="number">4.2</span>) <span class="comment">// result = 4.0</span></span><br><span class="line">result = <span class="built_in">floor</span>(<span class="number">4.5</span> + <span class="number">0.5</span>) <span class="comment">// result = 5.0 (반올림 시 안에 0.5더해주고 내리기)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;How-do-you-allow-spaces-to-be-entered-using-scanf&quot;&gt;&lt;a href=&quot;#How-do-you-allow-spaces-to-be-entered-using-scanf&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="C" scheme="https://rhkang.github.io/categories/IT/C/"/>
    
    
      <category term="C" scheme="https://rhkang.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Latex Guide</title>
    <link href="https://rhkang.github.io/2018/05/12/latex-guide/"/>
    <id>https://rhkang.github.io/2018/05/12/latex-guide/</id>
    <published>2018-05-12T00:04:43.000Z</published>
    <updated>2019-04-13T05:53:09.707Z</updated>
    
    <content type="html"><![CDATA[<p>수식 기호가 나타나지 않을 경우 페이지 우측 상단에서 안전하지 않은 스크립트 로드.<br>Code 사용의 경우 따로 정의한 code.tex 파일이 필요함.</p><ul><li><p>Template</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[12pt,fleqn]&#123;article&#125;</span><br><span class="line">\usepackage&#123;kotex&#125;  % 한글 사용</span><br><span class="line">\usepackage&#123;setspace&#125;</span><br><span class="line">\usepackage&#123;fullpage&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;amssymb&#125;</span><br><span class="line">\usepackage&#123;amsmath&#125;</span><br><span class="line">\usepackage&#123;mathtools&#125;</span><br><span class="line">\usepackage[ruled, linesnumbered]&#123;algorithm2e&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;graphicx&#125;</span><br><span class="line">\usepackage&#123;subcaption&#125;</span><br><span class="line"></span><br><span class="line">\usepackage&#123;hyperref&#125;</span><br><span class="line">\hypersetup&#123;</span><br><span class="line">colorlinks=true,</span><br><span class="line">linkcolor=blue,</span><br><span class="line">filecolor=blue,</span><br><span class="line">urlcolor=blue,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\def\title&#123;\textbf&#123;TITLE HERE&#125;&#125;</span><br><span class="line">\def\author&#123;NAME HERE&#125;</span><br><span class="line">\def\date&#123;MAY 2018&#125;</span><br><span class="line"></span><br><span class="line">\input&#123;code&#125;</span><br><span class="line">\input&#123;macros&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\setstretch&#123;1.2&#125;</span><br><span class="line"></span><br><span class="line">\fbox&#123;</span><br><span class="line">\parbox&#123;0.9\textwidth&#125;&#123;</span><br><span class="line">        \textbf&#123;MC322: Discrete Mathematics&#125;</span><br><span class="line">        \begin&#123;center&#125;</span><br><span class="line">            \LARGE&#123;\title&#125;</span><br><span class="line">        \end&#123;center&#125;</span><br><span class="line">        \author \hfill \date</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure></li><li><p>Code 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;code&#125;</span><br><span class="line">    % Contents...</span><br><span class="line">\end&#123;code&#125;</span><br></pre></td></tr></table></figure></li><li><p>Symbols</p></li></ul><table><thead><tr><th>Symbols</th><th>Syntax</th></tr></thead><tbody><tr><td>$\mathcal{C}, \mathcal{R}, \mathcal{Q}, …$</td><td>\mathcal{}</td><td></td></tr><tr><td>$\mathbf{R}, \mathbf{N}, \mathbf{P}, …$</td><td>\mathbf{}</td><td></td></tr><tr><td>$\mathbb{N}, \mathbb{R}, \mathbb{Q}, …$</td><td>\mathbb{}</td><td></td></tr><tr><td>$\phi, \varphi, \psi, \sigma, \aleph, \pi, \mu, …$</td><td>\phi, \varphi, \psi, \sigma, \aleph, \pi, \mu, …</td><td></td></tr><tr><td>$\vdash, =, \geq, \leq, …$</td><td>\vdash, =, \geq, \leq, …</td><td></td></tr><tr><td>$\neq, \nvdash, …$</td><td>\neq, \nvdash, …</td><td></td></tr><tr><td>$\nleq, \nleqslant, \nleqq, \lneq, \lneqq, \lvertneqq, \lnsim, \lnapprox, …$</td><td>\nleq, \nleqslant, \nleqq, \lneq, \lneqq, \lvertneqq, \lnsim, \lnapprox, …</td><td></td></tr><tr><td>$\leftarrow, \rightarrow, \uparrow, \downarrow, \Leftarrow, \Rightarrow, \Leftrightarrow$</td><td>\leftarrow, \rightarrow, \uparrow, \downarrow, \Leftarrow, \Rightarrow, \Leftrightarrow</td><td></td></tr><tr><td>${\displaystyle \sum_{i\in I}{\textrm{something}}}$</td><td>{\displaystyle \sum_{i\in I}{\textrm{something}}}</td><td></td></tr><tr><td>$\oplus, \odot, \otimes, \uplus, \cup, \cap$</td><td>\oplus, \odot, \otimes, \uplus, \cup, \cap</td><td></td></tr><tr><td>$\bigoplus, \bigodot, \bigotimes, \biguplus, \prod, \sum$</td><td>\bigoplus, \bigodot, \bigotimes, \biguplus, \prod, \sum</td><td></td></tr><tr><td>$\bigcup, \bigcap, \int, \oint, \bigvee, \bigwedge$</td><td>\bigcup, \bigcap, \int, \oint, \bigvee, \bigwedge</td><td></td></tr><tr><td>$\lfloor \; \rfloor \; \lceil \; \rceil \; \langle \; \rangle$</td><td>\lfloor \rfloor \lceil \rceil \langle \rangle</td><td></td></tr><tr><td>$\hat{a}, \acute{a}, \bar{a}, \dot{a}, \vec{a}, \ddot{a}, \tilde{a}$</td><td>\hat{a}, \acute{a}, \bar{a}, \dot{a}, \vec{a}, \ddot{a}, \tilde{a}</td><td></td></tr><tr><td>$\overline{abc}, \overrightarrow{pq}, \frac{a}{b}$</td><td>\overline{abc}, \overrightarrow{pq}, \frac{a}{b}</td><td></td></tr><tr><td>$\blacksquare \; \therefore \; \because \; \bot$</td><td>\blacksquare \; \therefore \; \because \; \bot</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;수식 기호가 나타나지 않을 경우 페이지 우측 상단에서 안전하지 않은 스크립트 로드.&lt;br&gt;Code 사용의 경우 따로 정의한 code.tex 파일이 필요함.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Template&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
    
      <category term="Latex" scheme="https://rhkang.github.io/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>범용 알고리즘 정리</title>
    <link href="https://rhkang.github.io/2018/05/11/basic-algorithms/"/>
    <id>https://rhkang.github.io/2018/05/11/basic-algorithms/</id>
    <published>2018-05-11T11:47:33.000Z</published>
    <updated>2019-03-06T04:13:10.102Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Latest-Update-2018-05-11"><a href="#Latest-Update-2018-05-11" class="headerlink" title="Latest Update: 2018.05.11"></a>Latest Update: 2018.05.11</h3><hr><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><ul><li>Python<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.d = data</span><br><span class="line">        self.prev = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._t = <span class="keyword">None</span></span><br><span class="line">        self._l = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, n)</span>:</span>     <span class="comment"># n: Node Object</span></span><br><span class="line">        <span class="keyword">if</span> self._l == <span class="number">0</span>:</span><br><span class="line">            n.prev = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n.prev = self._t</span><br><span class="line"></span><br><span class="line">        self._t = n</span><br><span class="line">        self._l += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._l == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tail = self._t</span><br><span class="line"></span><br><span class="line">            self._t = self._t.prev</span><br><span class="line">            self._l -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> tail</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (self._l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">    stack = Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        num = random.randint(<span class="number">0</span>, <span class="number">9</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> (num, end=<span class="string">' '</span>)</span><br><span class="line">        n = Node(num)</span><br><span class="line">        stack.push(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"length: "</span>, stack.length())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">print</span> (i+<span class="number">1</span>, <span class="string">":"</span>,  stack.pop().d)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><ul><li>Python<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">          self.d = data</span><br><span class="line">          self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Queue</span><span class="params">(object)</span>:</span></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">          self._h = <span class="keyword">None</span></span><br><span class="line">          self._t = <span class="keyword">None</span></span><br><span class="line">          self._l = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self, n)</span>:</span>     <span class="comment"># n: Node Object</span></span><br><span class="line">          <span class="keyword">if</span> self._l == <span class="number">0</span>:</span><br><span class="line">              self._h = n</span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              self._t.next = n</span><br><span class="line"></span><br><span class="line">          self._t = n</span><br><span class="line">          self._l += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></span><br><span class="line">          <span class="keyword">if</span> self._l == <span class="number">0</span>:</span><br><span class="line">              <span class="keyword">print</span> (<span class="string">"Empty"</span>)</span><br><span class="line"></span><br><span class="line">          <span class="keyword">else</span>:</span><br><span class="line">              head = self._h</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> self._l == <span class="number">1</span>:</span><br><span class="line">                  self._t = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">              self._h = self._h.next</span><br><span class="line">              self._l -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(self)</span>:</span></span><br><span class="line">          <span class="keyword">print</span> (self._l)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">      <span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">      queue = Queue()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">          num = random.randint(<span class="number">0</span>, <span class="number">9</span>) + <span class="number">1</span></span><br><span class="line">          print(num, end=<span class="string">' '</span>)</span><br><span class="line">          n = Node(num)</span><br><span class="line">          queue.enqueue(n)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"length: "</span>, queue.length())</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">          <span class="keyword">print</span> (i+<span class="number">1</span>, <span class="string">":"</span>, queue.dequeue().d)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Latest-Update-2018-05-11&quot;&gt;&lt;a href=&quot;#Latest-Update-2018-05-11&quot; class=&quot;headerlink&quot; title=&quot;Latest Update: 2018.05.11&quot;&gt;&lt;/a&gt;Latest Update
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
      <category term="Algorithm" scheme="https://rhkang.github.io/categories/IT/Algorithm/"/>
    
    
      <category term="Data Structure" scheme="https://rhkang.github.io/tags/Data-Structure/"/>
    
      <category term="Algorithm" scheme="https://rhkang.github.io/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>[Hexo] 자주 쓰는 커맨드 &amp; 알아두면 좋은 정보 모음(集)</title>
    <link href="https://rhkang.github.io/2018/05/09/hexo-information/"/>
    <id>https://rhkang.github.io/2018/05/09/hexo-information/</id>
    <published>2018-05-09T04:09:20.000Z</published>
    <updated>2019-04-22T10:41:14.217Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Latest-update-2018-05-09"><a href="#Latest-update-2018-05-09" class="headerlink" title="Latest update: 2018.05.09"></a>Latest update: 2018.05.09</h3><hr><ol><li>참고 링크 모음</li></ol><ul><li><a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">https://highlightjs.org/static/demo/</a> - Syntax highlight reference</li><li><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/markdown-basics" target="_blank" rel="noopener">https://shd101wyy.github.io/markdown-preview-enhanced/#/markdown-basics</a> - Markdown 기본 문법</li><li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#emphasis" target="_blank" rel="noopener">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#emphasis</a> - Markdown Cheetsheet</li><li><a href="https://hexo.io/ko/docs/writing.html" target="_blank" rel="noopener">https://hexo.io/ko/docs/writing.html</a> - Hexo basic usage</li><li><a href="http://futurecreator.github.io/2016/06/21/hexo-basic-usage/" target="_blank" rel="noopener">http://futurecreator.github.io/2016/06/21/hexo-basic-usage/</a> - Hexo 기본 사용법</li><li><a href="https://simhyejin.github.io/2016/06/24/hexo-themes/" target="_blank" rel="noopener">https://simhyejin.github.io/2016/06/24/hexo-themes/</a> - Hueman Theme 적용</li></ul><ol start="2"><li><p>Git 설정 (github 계정 연동)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;user&quot;</span><br><span class="line">$ git config --global user.email &quot;mail address&quot;</span><br></pre></td></tr></table></figure></li><li><p>hexo 설치</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>블로그 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog               # move to directory</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>포스트 생성부터 배포까지</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &quot;filename&quot;</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line">$ hexo publish [layout] &quot;title&quot;</span><br></pre></td></tr></table></figure></li></ol><p>Line 1: ./source/_[layout]/filename.md 생성 (default: post) (post, page, draft)<br>Line 2: Delete database and public folder<br>Line 4: 로컬 서버 구동 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> (Option: –draft)<br>Line 6: Draft(초안)을 Post로 publishing (제목 format에 맞춰 자동 수정, 생성 날짜 자동 추가)</p><p>포스트 이름에 대괄호를 포함할 경우 <code>&quot; &quot;</code>를 사용할 것 (안그럼 parsing error)</p><ol start="6"><li>Google Drive Image url<br>//<a href="http://drive.google.com/open?export=view&amp;id=" target="_blank" rel="noopener">http://drive.google.com/open?export=view&amp;id=</a>~ 를<br>//<a href="http://drive.google.com/uc?export=view&amp;id=" target="_blank" rel="noopener">http://drive.google.com/uc?export=view&amp;id=</a>~ 로 변경 후 참조</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Latest-update-2018-05-09&quot;&gt;&lt;a href=&quot;#Latest-update-2018-05-09&quot; class=&quot;headerlink&quot; title=&quot;Latest update: 2018.05.09&quot;&gt;&lt;/a&gt;Latest update
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
    
      <category term="Hexo" scheme="https://rhkang.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="https://rhkang.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>네트워크 통신에서의 데이터 무결성 검사</title>
    <link href="https://rhkang.github.io/2018/05/08/about-checksum/"/>
    <id>https://rhkang.github.io/2018/05/08/about-checksum/</id>
    <published>2018-05-08T04:53:33.000Z</published>
    <updated>2018-10-26T01:53:06.721Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>네트워크 통신에서의 데이터 무결성 검사 … checksum</p><h2 id="INTRO"><a href="#INTRO" class="headerlink" title="INTRO"></a>INTRO</h2><p>누구나 컴퓨터는 0과 1로 이루어져 있다는 이야기를 들어본 적이 있을 것이다. 실제로 모든 디지털 정보는 0과 1의 조합을 통해 표현된다. 우리가 어떤 문자를 이용해 정보를 기록하는 것과 같은 이치로 볼 수 있는데, 그 이해를 위해 두 가지 간단한 예를 들어보겠다.</p><p>먼저, 사람이 사용하는 문장을 0과 1로 바꾸어보자. 만약 a부터 e까지 다섯 개의 알파벳을 a: 000 / b: 001 / c: 01 / d: 10 / e: 11 와 같이 대응시킨다면, ‘abbdca’라는 문장은 ‘0000010011001000’로, 거꾸로 ‘0000010011001000’라는 문장은 위 대응 관계에 근거하여 ‘abbdca’로 유일하게 해석됨을 직접 확인할 수 있다.</p><p>이번에는 어떤 명령들을 0과 1로 나타내보자. 4가지 명령 ‘앉아’, ‘일어서’, ‘왼손’, ‘오른손’을 최대한 짧은 길이의 문장으로 겹치지 않게 표현하기 위해선 최소 4가지의 경우를 나타낼 수 있는 0과 1의 조합을 생각해야한다. 이 경우에는 2-bit 만을 이용하여 00, 01, 10, 11 네 가지 경우를 각 명령에 대응 시킬 수 있으며, 해석하는 입장에서는 각 bit의 값을 보고 즉각 어떤 명령인지 알 수 있을 것이다.</p><p>우리가 매일 사용하는 전자기기들은 매 순간 이러한 문장들을 저장하고, 컴퓨터의 중추 CPU에서는 0과 1로 표현된 정해진 길이의 명령들을 1초에 수억번에서 수십억번 가까이 처리하고 있다. 특히 전자기기가 일반인들에게 널리 보급되고, 모든 분야에서 컴퓨터가 사용되고 있으며, 네트워크가 상상할 수 없는 규모로 확장된 지금 사회에선 매 순간 엄청난 양의 정보들이 이동하고 있다.</p><p>여기서 한 가지 의문이 든다. 0과 1로만 이루어진 정보를 무선 통신으로 주고 받는데, 우리의 스마트폰과 노트북은 지구 반대편에서 보낸 정보 조차 한치의 오차 없이 받아낸다. 데이터의 결함은 그 규모에 상관 없이 큰 골칫거리인게, 위에서 예로 든 ‘0000010011001000’를 전송하는 도중 통신의 장애로 인해 ‘0000000011001000’으로 받아진다면 그 의미는 ‘abbdca’가 아닌 ‘aabdca’로 완전히 다른 뜻이 되어버린다. 전송하는 문장이 어떤 명령이라면 시스템 자체에 결함이 생기는 것이다.</p><p>하지만 당장 비가 오는 날 축구 생중계를 볼 때만 해도 통신 상태가 불안정해 TV화면이 자주 끊기는데, 네트워크 통신에서는 어떻게 아무 결함 없이 데이터가 전송될까? 이를 해결하는 단순하지만 강력한 방법, 체크섬(checksum)을 소개하려고 한다.</p><h2 id="Checksum이란"><a href="#Checksum이란" class="headerlink" title="Checksum이란"></a>Checksum이란</h2><p>체크섬은 <a href="https://ko.wikipedia.org/wiki/오류_검출_정정" target="_blank" rel="noopener">중복 검사</a>의 한 형태로, 수신한 자료의 무결성을 보장하려는 하나의 시도라 할 수 있다. 그 형태는 전송하려는 데이터를 더하여 얻은 값에 정해진 비트 수의 모듈라 연산을 취함으로서 결정되는 bit-string이며, 발신하는 입장에서는 raw-data에 checksum을 이어붙여 만들어진 새로운 데이터를 전송한다.</p><p>[~그림~]</p><p>위 그림을 보면 이해에 큰 도움이 될 것이다. Pre-code는 어떤 작업(실행)을 위해 필요한 필수 정보들이라 생각하면 되고, 실질적으로 해석해야 할 raw-data에 대해서 어떤 함수 f를 통해 생성되는 bit-string이 checksum이며, 이 파일의 꼬리에 checksum이 붙는 형태이다.</p><h2 id="Checksum의-동작"><a href="#Checksum의-동작" class="headerlink" title="Checksum의 동작"></a>Checksum의 동작</h2><p>크게 생성 함수 $f$에 대해서, 그리고 checksum을 통해 어떻게 무결성이 검증되는지 이 두 가지를 설명하려 한다. 방법만 보았을 땐 둘 다 굉장히 간단하다.</p><h4 id="Checksum의-생성"><a href="#Checksum의-생성" class="headerlink" title="Checksum의 생성"></a>Checksum의 생성</h4><p>흔히 나열된 데이터를 더하여 체크섬 숫자를 얻고, 이 숫자를 정해진 수로 나누어 그 나머지를 checksum으로 지정한다. 간단하게 예를 들어보겠다. 우리는 지금 32-bit(8-byte) 길이의 데이터에 대해 1-byte checksum을 생성하려고 한다. 32-bit data를 $m$이라 하고, 이 값은 $A267CBF3_{(16)}$이라 하자. 각 byte를 모두 더하면 $43_{(16)}$이 된다. 이때 checksum은 1-byte 크기이므로 $3_{(16)}$, 즉 $0011_{(2)}$이 될 것이다.</p><p>식으로 나타내면, $f(m) = c$ where $m = A267CBF3_{(16)}$, $c = 0011_{(2)}$</p><h4 id="무결성-검증"><a href="#무결성-검증" class="headerlink" title="무결성 검증"></a>무결성 검증</h4><p>수신한 메시지에서 raw-data와 checksum에 해당하는 bit-string을 각각  $m’$, $c’$이라 하자. 이때 checksum 생성 함수 $f$는 서로 약속되어 있다. 만약 $f(m’) = c’$이면, 메시지의 변조나 누락이 없다고 판단한다. 데이터의 변조는 크게 두 가지 케이스로 나뉜다.</p><ol><li>전송 과정에서 발생하는 물리적인 장애로 인한 변조</li><li>의도적인 데이터 조작</li></ol><p>여기까지 납득했다면 checksum은 1.의 대안으로 등장했다는 것을 알 수 있다. 2.의 경우 프로토콜의 암호화를 통해 극복한다. 이 이야기를 갑자기 한 이유는 단순하게 정의된 $f$에 대해 만들어진 $f(m’)$과 주어진 $c’$값의 비교 만으로 어떻게 무결성이 보장되는지 설명하기 위함이다.</p><p>$m’$은 어떤 이유로 인해 $m$(송신 raw-data)의 bit들이 변조된 bit-string이고, $c’$도 마찬가지의 이유로 변조되었을 가능성이 존재한다. 이 때 checksum이 1-bit라면 $m=m’$이 아닌데도 $f(m’)=c’$ 이 될 확률이 굉장히 높을 수 있다. 하지만, checksum의 bit를 하나 늘려 2-bit checksum으로 만들어버리면, 그 확률이 크게 감소한다. 구체적으로는, <strong>checksum bit가 2배로 늘어날 때마다 ‘$m \ne m’$이면서 $f(m’)=c’$일 확률’은 logarithmic하게 감소한다.</strong></p><p>Checksum 생성 함수 $f$의 특징을 고려하여 경우를 따져보면 쉽게 그 이유를 확인할 수 있는데, 글로만 보아선 크게 와닿지 않으므로 직접 간단한 테스트를 해보았다.</p><table><thead><tr><th>[checksum : 2bit, trials=10000]</th><th>[checksum : 4bit, trials=10000]</th><th>[checksum : 8bit, trials=10000]</th><th>[checksum : 16bit, trials=10000]</th></tr></thead><tbody><tr><td>Probability : 0.252</td><td>Probability : 0.0645</td><td>Probability : 0.004</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2471</td><td>Probability : 0.0631</td><td>Probability : 0.0033</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2506</td><td>Probability : 0.06</td><td>Probability : 0.004</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2487</td><td>Probability : 0.0623</td><td>Probability : 0.0038</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2489</td><td>Probability : 0.0677</td><td>Probability : 0.0036</td><td>Probability : 0.0001</td><td></td></tr><tr><td>Probability : 0.2487</td><td>Probability : 0.0624</td><td>Probability : 0.0042</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2521</td><td>Probability : 0.0634</td><td>Probability : 0.0041</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.2491</td><td>Probability : 0.0641</td><td>Probability : 0.0031</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.255</td><td>Probability : 0.0625</td><td>Probability : 0.0035</td><td>Probability : 0.0</td><td></td></tr><tr><td>Probability : 0.247</td><td>Probability : 0.0655</td><td>Probability : 0.0034</td><td>Probability : 0.0</td><td></td></tr><tr><td>Average : 0.2499</td><td>Average : 0.0636 (0.2499^2 $\simeq$ 0.06245)</td><td>Average : 0.0037 (0.0636^2 $\simeq$ 0.00404)</td><td>Average : 0</td><td></td></tr></tbody></table><p>0과 1로 이루어진 임의의 문장을 생성하고, 각 bit에 대해 동일하게 변조될 확률을 부여한다. 이를 통해 각 케이스 당 10번, 그리고 각 시도 당 10000번 $f(m’)=c’$여부를 확인하여 확률을 도출해냈다. Checksum bit를 2배로 늘려가며 같은 시행을 총 4번 반복하였고, 이를 통해 값들이 서로 지수적인 관계를 가진다는 것을 보이려했다.</p><p>2017학년도 1학기에 해보았던 것이라 구체적으로 설정했던 $m$의 length와 각 bit의 변조 확률은 기억나지 않는다. (아쉽게도 소스 코드를 폐기한듯..) 하지만 위 실험 결과로 미루어 보아 위에서 강조한 내용이 맞는 것을 확인할 수 있다..!</p><p><strong>즉, 어떤 메시지를 수신한 후, 그에 해당하는 $m’$과 $c’$에 대해 $f(m’)=c’$이 아닐경우 이를 reject하고 다시 같은 요청을 보내는데, 변조된 메시지가 이 과정을 통과할 가능성은 checksum의 길이에 따라 급격히 줄어드는 것이다.</strong></p><p>실제로 인터넷 통신 시스템이나 마이크로프로세서 시스템 내부 명령에서의 오류 검증에 checksum이 사용되며, 그 정확성은 확률로서 보장한다. 이런 간단한 방식으로 완전한 데이터 통신을 보장할 수 있다는 점이 실로 놀랍다! 관심있는 사람은 확률을 통해 정확성을 보장하는 비슷한 방식의 <a href="https://ko.wikipedia.org/wiki/영지식_증명" target="_blank" rel="noopener">영지식 증명 프로토콜(ZKP)</a>도 함께 살펴보면 좋을 것 같다.</p><!-- md nametag/16-001.md -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;네트워크 통신에서의 데이터 무결성 검사 … checksum&lt;/p&gt;
&lt;h2 id=&quot;INTRO&quot;&gt;&lt;a href=&quot;#INTRO&quot; class=&quot;headerlink&quot; title=&quot;INTRO&quot;&gt;&lt;/a&gt;INTRO&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="IT" scheme="https://rhkang.github.io/categories/IT/"/>
    
    
  </entry>
  
</feed>
